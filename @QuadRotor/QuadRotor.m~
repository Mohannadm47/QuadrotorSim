classdef QuadRotor
	
	properties (Access = protected)
		trans_
		ax_
	end
	
	properties  (Access = public)
		%x  % state [x; dx; phi; dphi]
		dt % sampling time.
		L % Length
		b % 
		k % const relating sq of motor's angular velocity to thrust from a motor.
		I % intertia
		m % mass
		g % gravity
		kd % Aerodynamic damping.
		u % control
		
		omega
		theta
		omegadot
		thetadot
		x
		xdot
		
	end
	
	methods (Access = protected)
		function dx=dynamics(quadrotor, t,x)
			
			
			
			omega = thetadot2omega(thetadot, theta);
			
			% Compute linear and angular accelerations.
			a = acceleration(i, theta, xdot, m, g, k, kd);
			omegadot = angular_acceleration(i, omega, I, L, b, k);
			
			omega = omega + dt * omegadot;
			thetadot = omega2thetadot(omega, theta);
			theta = theta + dt * thetadot;
			xdot = xdot + dt * a;
			x = x + dt * xdot;
			
		end
		
		segway = init(segway);
	end
	
	methods
		function quadrotor = QuadRotor(ax)
			quadrotor = quadrotor.init;
		end
		x_new=step(quadrotor);
	end
	
end
